<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CloudLib.Client.WinUI.Controls"
    xmlns:views="using:CloudLib.Client.WinUI.Views">

    <ResourceDictionary.ThemeDictionaries>
        <ResourceDictionary x:Key="Dark">
            <!--  TODO: This still seems a bit dark?  -->
            <SolidColorBrush x:Key="ContextualTabBackground"
                             Color="{ThemeResource SystemAltMediumHighColor}" />
        </ResourceDictionary>
        <ResourceDictionary x:Key="Light">
            <SolidColorBrush x:Key="ContextualTabBackground"
                             Color="{ThemeResource SystemChromeMediumColor}" />
        </ResourceDictionary>
        <ResourceDictionary x:Key="HighContrast">
            <SolidColorBrush x:Key="ContextualTabBackground"
                             Color="{ThemeResource SystemAltLowColor}" />
        </ResourceDictionary>
    </ResourceDictionary.ThemeDictionaries>

    <SolidColorBrush x:Key="NormalTabBackground"
                     Color="{ThemeResource SystemChromeLowColor}" />
    <SolidColorBrush x:Key="NormalTabAcrylicBackground"
                     Color="{ThemeResource SystemControlChromeLowAcrylicWindowBrush}" />

    <Style BasedOn="{StaticResource DefaultNavigationRibbonItemStyle}"
           TargetType="local:NavigationRibbonItem" />

    <Style x:Key="DefaultNavigationRibbonItemStyle"
           BasedOn="{StaticResource DefaultCommandBarStyle}"
           TargetType="local:NavigationRibbonItem">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="DefaultLabelPosition" Value="Right" />
        <Setter Property="Background" Value="{ThemeResource NormalTabBackground}" />
        <!--
            Is there a way to prevent the overflow button from showing if there aren't any buttons to send to the overflow menu?
            (See this message in the WinUI channel: https://discord.com/channels/372137812037730304/671870147354427422/771057634203402300 )
            Hardcoding the height of the CommandBar works, but it's a bit of a hack.
        -->
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="NavigationRibbonItemAcrylicStyle"
           BasedOn="{StaticResource DefaultNavigationRibbonItemStyle}"
           TargetType="local:NavigationRibbonItem">
        <Setter Property="Background" Value="{ThemeResource NormalTabAcrylicBackground}" />
    </Style>

    <DataTemplate x:Key="NormalTabTemplate">
        <NavigationViewItem Content="{Binding Header}"
                                 Visibility="{Binding Visibility}" />
    </DataTemplate>
    <DataTemplate x:Key="ContextualTabTemplate">
        <NavigationViewItem Background="{ThemeResource ContextualTabBackground}"
                                 Content="{Binding Header}"
                                 Visibility="{Binding Visibility}">
            <NavigationViewItem.Resources>
                <!--  TODO: These should reference NavigationRibbonItem-specific resources so they can overriden  -->
                <SolidColorBrush x:Key="TopNavigationViewItemForeground"
                                 Color="{ThemeResource SystemAccentColor}" />
                <SolidColorBrush x:Key="TopNavigationViewItemForegroundSelected"
                                 Color="{ThemeResource SystemAccentColor}" />
                <SolidColorBrush x:Key="TopNavigationViewItemForegroundPointerOver"
                                 Color="{ThemeResource SystemAccentColorLight2}" />
                <SolidColorBrush x:Key="TopNavigationViewItemForegroundPressed"
                                 Color="{ThemeResource SystemAccentColorLight2}" />

                <!--  TODO: Set BackgroundSelected to match ContextualTabBackground  -->
                <!--<StaticResource x:Key="TopNavigationViewItemBackgroundSelected" ResourceKey="ContextualTabBackgroundColor" />-->
            </NavigationViewItem.Resources>
        </NavigationViewItem>
    </DataTemplate>
    <local:NavigationRibbonItemTemplateSelector x:Key="DefaultNavigationRibbonItemTemplateSelector"
                                                   Contextual="{StaticResource ContextualTabTemplate}"
                                                   Normal="{StaticResource NormalTabTemplate}" />

    <Style x:Key="NavigationRibbonElementContainerStyle"
           TargetType="AppBarElementContainer">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="1,0" />
    </Style>

    <Style x:Key="AppBarSplitButtonStyle"
           TargetType="SplitButton">
        <Setter Property="Background" Value="{ThemeResource AppBarButtonRevealBackground}" />
        <Setter Property="Foreground" Value="{ThemeResource AppBarItemForegroundThemeBrush}" />
        <Setter Property="BorderBrush" Value="{ThemeResource SplitButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="{ThemeResource SplitButtonBorderThemeThickness}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
        <Setter Property="UseSystemFocusVisuals" Value="True" />
        <Setter Property="FocusVisualMargin" Value="-3" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Padding" Value="{ThemeResource ButtonPadding}" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="SplitButton">
                    <Grid x:Name="RootGrid"
                          Background="Transparent"
                          CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid.Resources>
                            <!--  Override the style of the inner buttons so that they don't affect background/foreground/border colors  -->
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="{ThemeResource ButtonRevealBackground}" />
                                <Setter Property="Foreground" Value="{ThemeResource ButtonForeground}" />
                                <Setter Property="BorderBrush" Value="{ThemeResource ButtonRevealBorderBrush}" />
                                <Setter Property="BorderThickness" Value="{ThemeResource ButtonRevealBorderThemeThickness}" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
                                <Setter Property="FontWeight" Value="Normal" />
                                <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
                                <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
                                <Setter Property="FocusVisualMargin" Value="-3" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Button">
                                            <Grid x:Name="RootGrid"
                                                  Background="Transparent">

                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal">
                                                            <Storyboard>
                                                                <PointerUpThemeAnimation Storyboard.TargetName="RootGrid" />
                                                            </Storyboard>
                                                        </VisualState>

                                                        <VisualState x:Name="PointerOver">
                                                            <VisualState.Setters>
                                                                <Setter Target="RootGrid.(RevealBrush.State)" Value="PointerOver" />
                                                                <Setter Target="RootGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPointerOver}" />
                                                                <Setter Target="ContentPresenter.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPointerOver}" />
                                                                <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                                            </VisualState.Setters>
                                                            <Storyboard>
                                                                <PointerUpThemeAnimation Storyboard.TargetName="RootGrid" />
                                                            </Storyboard>
                                                        </VisualState>

                                                        <VisualState x:Name="Pressed">
                                                            <VisualState.Setters>
                                                                <Setter Target="RootGrid.(RevealBrush.State)" Value="Pressed" />
                                                                <Setter Target="RootGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPressed}" />
                                                                <Setter Target="ContentPresenter.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPressed}" />
                                                                <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                                            </VisualState.Setters>
                                                            <Storyboard>
                                                                <PointerDownThemeAnimation Storyboard.TargetName="RootGrid" />
                                                            </Storyboard>
                                                        </VisualState>

                                                        <VisualState x:Name="Disabled">
                                                            <VisualState.Setters>
                                                                <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource SplitButtonForegroundDisabled}" />
                                                            </VisualState.Setters>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <ContentPresenter x:Name="ContentPresenter"
                                                                  Padding="{TemplateBinding Padding}"
                                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                  AutomationProperties.AccessibilityView="Raw"
                                                                  BorderBrush="{TemplateBinding BorderBrush}"
                                                                  BorderThickness="{TemplateBinding BorderThickness}"
                                                                  Content="{TemplateBinding Content}"
                                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                  ContentTransitions="{TemplateBinding ContentTransitions}" />
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Grid.Resources>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="PrimaryButtonColumn"
                                              Width="*"
                                              MinWidth="{ThemeResource SplitButtonPrimaryButtonSize}" />
                            <ColumnDefinition x:Name="Separator"
                                              Width="1" />
                            <ColumnDefinition x:Name="SecondaryButtonColumn"
                                              Width="{ThemeResource SplitButtonSecondaryButtonSize}" />
                        </Grid.ColumnDefinitions>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />

                                <VisualState x:Name="FlyoutOpen">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPressed}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPressed}" />
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPressed}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="TouchPressed">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPressed}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPressed}" />
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPressed}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="PrimaryPointerOver">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPointerOver}" />
                                        <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPointerOver}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackground}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="PrimaryPressed">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonBackgroundPressed}" />
                                        <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPressed}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackground}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="SecondaryPointerOver">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackground}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackgroundPointerOver}" />
                                        <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPointerOver}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="SecondaryPressed">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonRevealBackground}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource AppBarButtonBackgroundPressed}" />
                                        <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource AppBarButtonRevealBorderBrushPressed}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource AppBarButtonForegroundPressed}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="Checked">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="CheckedFlyoutOpen">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="CheckedTouchPressed">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="CheckedPrimaryPointerOver">
                                    <VisualState.Setters>
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPointerOver}" />
                                        <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPointerOver}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPointerOver}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="CheckedPrimaryPressed">
                                    <VisualState.Setters>
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                                        <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="CheckedSecondaryPointerOver">
                                    <VisualState.Setters>
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPointerOver}" />
                                        <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPointerOver}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPointerOver}" />
                                    </VisualState.Setters>
                                </VisualState>

                                <VisualState x:Name="CheckedSecondaryPressed">
                                    <VisualState.Setters>
                                        <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                                        <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                                        <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                                        <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                                        <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                                        <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="SecondaryButtonPlacementStates">
                                <VisualState x:Name="SecondaryButtonRight" />

                                <VisualState x:Name="SecondaryButtonSpan">
                                    <VisualState.Setters>
                                        <Setter Target="SecondaryButton.(Grid.Column)" Value="0" />
                                        <Setter Target="SecondaryButton.(Grid.ColumnSpan)" Value="3" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid x:Name="PrimaryBackgroundGrid"
                              Background="{TemplateBinding Background}" />

                        <Grid x:Name="SecondaryBackgroundGrid"
                              Grid.Column="2"
                              Background="{TemplateBinding Background}" />

                        <Grid x:Name="Border"
                              Grid.ColumnSpan="3"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              CornerRadius="{TemplateBinding CornerRadius}" />

                        <Button x:Name="PrimaryButton"
                                Grid.Column="0"
                                Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                AutomationProperties.AccessibilityView="Raw"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Command="{TemplateBinding Command}"
                                CommandParameter="{TemplateBinding CommandParameter}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTransitions="{TemplateBinding ContentTransitions}"
                                Foreground="{TemplateBinding Foreground}"
                                IsTabStop="False" />

                        <Button x:Name="SecondaryButton"
                                Grid.Column="2"
                                Padding="0,0,9,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                AutomationProperties.AccessibilityView="Raw"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Foreground="{TemplateBinding Foreground}"
                                IsTabStop="False">
                            <Button.Content>
                                <TextBlock HorizontalAlignment="Right"
                                           VerticalAlignment="Center"
                                           AutomationProperties.AccessibilityView="Raw"
                                           FontFamily="{ThemeResource SymbolThemeFontFamily}"
                                           FontSize="12"
                                           Text="&#xE70D;" />
                            </Button.Content>
                        </Button>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--<Style TargetType="views:ShellPage">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="views:ShellPage">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style BasedOn="{StaticResource DefaultNavigationRibbonStyle}" TargetType="local:NavigationRibbon"/>

    <Style x:Key="DefaultNavigationRibbonStyle" TargetType="local:NavigationRibbon">
        <Setter Property="MenuItemTemplateSelector" Value="{StaticResource DefaultNavigationRibbonItemTemplateSelector}"/>
        <Setter Property="PaneDisplayMode" Value="Top"/>
        <Setter Property="PaneToggleButtonStyle" Value="{StaticResource PaneToggleButtonStyle}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="CompactPaneLength" Value="{ThemeResource NavigationViewCompactPaneLength}"/>
        <Setter Property="Background" Value="{ThemeResource SystemControlAcrylicWindowBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:NavigationRibbon">
                    <Grid x:Name="RootGrid">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <!--VisualStateGroups for AutoSuggestBox and BackButton-->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="AutoSuggestGroup">
                                <VisualState x:Name="AutoSuggestBoxVisible"/>
                                <VisualState x:Name="AutoSuggestBoxCollapsed">
                                    <VisualState.Setters>
                                        <Setter Target="TopPaneAutoSuggestArea.Visibility" Value="Collapsed"/>
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BackButtonGroup">
                                <VisualState x:Name="BackButtonVisible" />
                                <VisualState x:Name="BackButtonCollapsed">
                                    <VisualState.Setters>
                                        <Setter Target="TopNav_BackButtonPlaceholder.Width" Value="0"/>
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <!--Button Grid-->
                        <Grid x:Name="PaneToggleButtonGrid"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Top"
                              Canvas.ZIndex="100">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <Grid x:Name="TogglePaneTopPadding"
                                  Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />

                            <Grid x:Name="ButtonHolderGrid"
                                  Grid.Row="1"
                                  Margin="{ThemeResource PivotNavButtonMargin}">
                                <Button x:Name="NavigationViewBackButton"
                                        Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=TemplateSettings.SmallerPaneToggleButtonWidth}"
                                        VerticalAlignment="Top"
                                        IsEnabled="{TemplateBinding IsBackEnabled}"
                                        Style="{StaticResource NavigationBackButtonNormalStyle}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}">
                                    <ToolTipService.ToolTip>
                                        <ToolTip x:Name="NavigationViewBackButtonToolTip" />
                                    </ToolTipService.ToolTip>
                                </Button>
                                <Button x:Name="NavigationViewCloseButton"
                                        VerticalAlignment="Top"
                                        Style="{StaticResource NavigationBackButtonNormalStyle}">
                                    <ToolTipService.ToolTip>
                                        <ToolTip x:Name="NavigationViewCloseButtonToolTip" />
                                    </ToolTipService.ToolTip>
                                </Button>
                                <Button x:Name="TogglePaneButton"
                                        MinWidth="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path = TemplateSettings.SmallerPaneToggleButtonWidth}"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Top"
                                        AutomationProperties.LandmarkType="Navigation"
                                        FocusVisualMargin="0"
                                        Style="{TemplateBinding PaneToggleButtonStyle}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}">
                                    <TextBlock x:Name="PaneTitleTextBlock"
                                               Grid.Column="0"
                                               Margin="0,-2,0,0"
                                               HorizontalAlignment="Left"
                                               VerticalAlignment="Center"
                                               Style="{StaticResource ResourceKey=SubheaderTextBlockStyle}"
                                               Text="{TemplateBinding PaneTitle}" />
                                </Button>

                                <Grid x:Name="PaneTitleHolder"
                                      Height="40"
                                      Visibility="Collapsed">
                                    <ContentControl x:Name="PaneTitlePresenter"
                                                    Margin="{ThemeResource ContentDialogTitleMargin}"
                                                    HorizontalContentAlignment="Stretch"
                                                    VerticalContentAlignment="Stretch"
                                                    IsTabStop="False" />
                                </Grid>
                            </Grid>
                        </Grid>

                        <StackPanel x:Name="TopNavArea"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Top"
                                            Background="{ThemeResource NavigationViewExpandedPaneBackground}"
                                            Canvas.ZIndex="1"
                                            XYFocusKeyboardNavigation="Enabled">
                            <Grid x:Name="TopNavTopPadding" Height="{Binding Height, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                          Visibility="{Binding TemplateSettings.TopPaneVisibility, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Grid x:Name="TopNavGrid"
                                          Height="{ThemeResource NavigationViewTopPaneHeight}"
                                          Margin="{ThemeResource NavigationViewAutoSuggestBoxMargin}"
                                          BorderBrush="{ThemeResource MenuFlyoutSeparatorThemeBrush}"
                                          Visibility="{Binding TemplateSettings.TopPaneVisibility, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="BackButtonPlaceholderOnTopNav"
                                        Width="{ThemeResource AppBarExpandButtonThemeWidthGridLength}"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*" MinWidth="48"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="TopNavLeftPadding"
                                              Grid.Column="1"
                                              Width="0"/>
                                <ContentControl x:Name="PaneHeaderOnTopPane"
                                                        Grid.Column="2"
                                                        HorizontalContentAlignment="Stretch"
                                                        VerticalContentAlignment="Stretch"
                                                        IsTabStop="False"/>
                                <ContentControl x:Name="PaneTitleOnTopPane"
                                                        Grid.Column="2"
                                                        Margin="{ThemeResource NavigationViewItemInnerHeaderMargin}"
                                                        HorizontalContentAlignment="Stretch"
                                                        VerticalContentAlignment="Stretch"
                                                        IsTabStop="False"/>

                                <!--Top nav ItemsRepeater-->
                                <ItemsRepeaterScrollHost Grid.Column="3">
                                    <ScrollViewer HorizontalScrollBarVisibility="Hidden"
                                                  HorizontalScrollMode="Disabled"
                                                  VerticalScrollBarVisibility="Hidden"
                                                  VerticalScrollMode="Disabled">
                                        <ItemsRepeater x:Name="TopNavMenuItemsHost"
                                                       AutomationProperties.AccessibilityView="Content"
                                                       AutomationProperties.LandmarkType="Navigation"
                                                       AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}">
                                            <ItemsRepeater.Layout>
                                                <StackLayout Orientation="Horizontal"/>
                                            </ItemsRepeater.Layout>
                                        </ItemsRepeater>
                                    </ScrollViewer>
                                </ItemsRepeaterScrollHost>

                                <Button x:Name="TopNavOverflowButton"
                                        Grid.Column="4"
                                        Margin="{ThemeResource NavigationViewAutoSuggestBoxMargin}"
                                        Content="More"
                                        Style="{StaticResource NavigationViewOverflowButtonStyleWhenPaneOnTop}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=TemplateSettings.OverflowButtonVisibility}">
                                    <Button.Flyout>
                                        <Flyout ElementSoundMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ElementSoundMode}"
                                                Placement="BottomEdgeAlignedRight">
                                            <Flyout.FlyoutPresenterStyle>
                                                <Style TargetType="FlyoutPresenter">
                                                    <Setter Property="Padding" Value="{ThemeResource NavigationViewAutoSuggestBoxMargin}"/>
                                                    <Setter Property="Margin" Value="0,-4,0,0"/>
                                                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto"/>
                                                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                                                    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto"/>
                                                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                                                    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled"/>
                                                    <Setter Property="CornerRadius" Value="{ThemeResource HyperlinkFocusRectCornerRadius}"/>
                                                    <!--TODO: Create a OverlayCornerRadius ThemeResource to replace this-->
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="FlyoutPresenter">
                                                                <ScrollViewer x:Name="ScrollViewer"
                                                                              AutomationProperties.AccessibilityView="Raw"
                                                                              HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                                                              HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
                                                                              VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                                                              VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
                                                                              ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}">
                                                                    <ContentPresenter x:Name="ContentPresenter"
                                                                                      Padding="{TemplateBinding Padding}"
                                                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                                      Background="{TemplateBinding Background}"
                                                                                      BorderBrush="{TemplateBinding BorderBrush}"
                                                                                      BorderThickness="{TemplateBinding BorderThickness}"
                                                                                      Content="{TemplateBinding Content}"
                                                                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                                      ContentTransitions="{TemplateBinding ContentTransitions}"
                                                                                      CornerRadius="{TemplateBinding CornerRadius}" />
                                                                </ScrollViewer>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Flyout.FlyoutPresenterStyle>
                                            <ItemsRepeaterScrollHost>
                                                <ScrollViewer VerticalScrollBarVisibility="Auto">
                                                    <ItemsRepeater x:Name="TopNavMenuItemsOverflowHost"
                                                                   AutomationProperties.AccessibilityView="Content">
                                                        <ItemsRepeater.Layout>
                                                            <StackLayout/>
                                                        </ItemsRepeater.Layout>
                                                    </ItemsRepeater>
                                                </ScrollViewer>
                                            </ItemsRepeaterScrollHost>
                                        </Flyout>
                                    </Button.Flyout>
                                </Button>
                                <ContentControl x:Name="PaneCustomContentOnTopPane"
                                                Grid.Column="5"
                                                HorizontalContentAlignment="Stretch"
                                                VerticalContentAlignment="Stretch"
                                                IsTabStop="False" />

                                <Grid x:Name="TopPaneAutoSuggestArea"
                                      Grid.Column="6"
                                      Height="{ThemeResource NavigationViewTopPaneHeight}">

                                    <ContentControl x:Name="TopPaneAutoSuggestBoxPresenter"
                                                    MinWidth="216"
                                                    Margin="{ThemeResource TopNavigationViewAutoSuggestBoxMargin}"
                                                    HorizontalContentAlignment="Stretch"
                                                    VerticalContentAlignment="Center"
                                                    IsTabStop="False" />
                                </Grid>

                                <ContentControl x:Name="PaneFooterOnTopPane"
                                                Grid.Column="7"
                                                HorizontalContentAlignment="Stretch"
                                                VerticalContentAlignment="Stretch"
                                                IsTabStop="False" />
                                <!--  Top footer menu ItemsRepeater  -->
                                <ItemsRepeater x:Name="TopFooterMenuItemsHost"
                                                    Grid.Column="8"
                                                    AutomationProperties.AccessibilityView="Content"
                                                    AutomationProperties.LandmarkType="Navigation">
                                    <ItemsRepeater.Layout>
                                        <StackLayout Orientation="Horizontal" />
                                    </ItemsRepeater.Layout>
                                </ItemsRepeater>

                            </Grid>
                            <Border x:Name="TopNavContentOverlayAreaGrid"
                                    Child="{TemplateBinding ContentOverlay}" />
                        </StackPanel>

                        <Border x:Name="PART_NavigationRibbonContentBorder"
                                Grid.Row="1"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{Binding ElementName=PART_NavigationRibbonContent, Path=Content.Background}">
                            <ContentControl x:Name="PART_NavigationRibbonContent"
                                            HorizontalContentAlignment="Stretch"
                                            Content="{TemplateBinding SelectedItem}">
                                <ContentControl.Resources>
                                    <Storyboard x:Name="PART_TabChangedStoryboard">
                                        <PopInThemeAnimation TargetName="PART_NavigationRibbonContent" />
                                    </Storyboard>

                                    <!--
                                        FIXME: Ideally, these resources would be set by the NavigationRibbonItem,
                                        but there isn't a way to do that without duplicating the CommandBar template.
                                    -->
                                    <Style BasedOn="{StaticResource NavigationRibbonElementContainerStyle}"
                                           TargetType="AppBarElementContainer" />
                                    <Style BasedOn="{StaticResource AppBarSplitButtonStyle}"
                                           TargetType="SplitButton" />
                                </ContentControl.Resources>
                            </ContentControl>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="NavigationRibbonAcrylicBackground"
                     Color="{ThemeResource SystemControlChromeMediumLowAcrylicWindowMediumBrush}" />
    <Style x:Key="NavigationRibbonAcrylicStyle"
           BasedOn="{StaticResource DefaultNavigationRibbonStyle}"
           TargetType="local:NavigationRibbon">
        <Setter Property="Background" Value="{ThemeResource NavigationRibbonAcrylicBackground}" />
    </Style>
</ResourceDictionary>
