#pragma checksum "C:\Users\chapm\source\repos\CloudLib.Client\CloudLib.Client\Views\InkDrawPicturePage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "72C2289BB513DDDF64EBB05C4267DCA6F9365E8655AA72AA753E8448ED5D4AA2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudLib.Client.Views
{
    partial class InkDrawPicturePage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InkDrawPicturePage_obj3_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IInkDrawPicturePage_Bindings
        {
            private global::CloudLib.Client.ViewModels.InkDrawPictureViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj4;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj5;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4IsCheckedDisabled = false;
            private static bool isobj5IsCheckedDisabled = false;

            private InkDrawPicturePage_obj3_BindingsTracking bindingsTracking;

            public InkDrawPicturePage_obj3_Bindings()
            {
                this.bindingsTracking = new InkDrawPicturePage_obj3_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 45 && columnNumber == 113)
                {
                    isobj4IsCheckedDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 113)
                {
                    isobj5IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\InkDrawPicturePage.xaml line 44
                        this.obj3 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.InkToolbar)target);
                        break;
                    case 4: // Views\InkDrawPicturePage.xaml line 45
                        this.obj4 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Views\InkDrawPicturePage.xaml line 48
                        this.obj5 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj3.Target as global::Windows.UI.Xaml.Controls.InkToolbar).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::CloudLib.Client.ViewModels.InkDrawPictureViewModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IInkDrawPicturePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::CloudLib.Client.ViewModels.InkDrawPictureViewModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_EnableTouch(obj.EnableTouch, phase);
                        this.Update_EnableMouse(obj.EnableMouse, phase);
                    }
                }
            }
            private void Update_EnableTouch(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 45
                    if (!isobj4IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj4, obj, null);
                    }
                }
            }
            private void Update_EnableMouse(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 48
                    if (!isobj5IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj5, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_4_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableTouch = (global::System.Boolean)this.obj4.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_5_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableMouse = (global::System.Boolean)this.obj5.IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InkDrawPicturePage_obj3_BindingsTracking
            {
                private global::System.WeakReference<InkDrawPicturePage_obj3_Bindings> weakRefToBindingObj; 

                public InkDrawPicturePage_obj3_BindingsTracking(InkDrawPicturePage_obj3_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InkDrawPicturePage_obj3_Bindings>(obj);
                }

                public InkDrawPicturePage_obj3_Bindings TryGetBindingObject()
                {
                    InkDrawPicturePage_obj3_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InkDrawPicturePage_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj = sender as global::CloudLib.Client.ViewModels.InkDrawPictureViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "EnableTouch":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnableMouse":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj)
                {
                    InkDrawPicturePage_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_4(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_IsChecked();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InkDrawPicturePage_obj7_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IInkDrawPicturePage_Bindings
        {
            private global::CloudLib.Client.ViewModels.InkDrawPictureViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj7;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj10;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj11;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj12;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj13;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj14;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj15;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj16;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj17;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj18;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj10CommandDisabled = false;
            private static bool isobj11CommandDisabled = false;
            private static bool isobj12CommandDisabled = false;
            private static bool isobj13CommandDisabled = false;
            private static bool isobj14CommandDisabled = false;
            private static bool isobj15CommandDisabled = false;
            private static bool isobj16CommandDisabled = false;
            private static bool isobj17IsCheckedDisabled = false;
            private static bool isobj18IsCheckedDisabled = false;

            private InkDrawPicturePage_obj7_BindingsTracking bindingsTracking;

            public InkDrawPicturePage_obj7_Bindings()
            {
                this.bindingsTracking = new InkDrawPicturePage_obj7_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 24 && columnNumber == 89)
                {
                    isobj10CommandDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 91)
                {
                    isobj11CommandDisabled = true;
                }
                else if (lineNumber == 28 && columnNumber == 99)
                {
                    isobj12CommandDisabled = true;
                }
                else if (lineNumber == 29 && columnNumber == 80)
                {
                    isobj13CommandDisabled = true;
                }
                else if (lineNumber == 33 && columnNumber == 78)
                {
                    isobj14CommandDisabled = true;
                }
                else if (lineNumber == 36 && columnNumber == 90)
                {
                    isobj15CommandDisabled = true;
                }
                else if (lineNumber == 38 && columnNumber == 91)
                {
                    isobj16CommandDisabled = true;
                }
                else if (lineNumber == 15 && columnNumber == 116)
                {
                    isobj17IsCheckedDisabled = true;
                }
                else if (lineNumber == 18 && columnNumber == 117)
                {
                    isobj18IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Views\InkDrawPicturePage.xaml line 12
                        this.obj7 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 10: // Views\InkDrawPicturePage.xaml line 24
                        this.obj10 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 11: // Views\InkDrawPicturePage.xaml line 25
                        this.obj11 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 12: // Views\InkDrawPicturePage.xaml line 28
                        this.obj12 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 13: // Views\InkDrawPicturePage.xaml line 29
                        this.obj13 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 14: // Views\InkDrawPicturePage.xaml line 33
                        this.obj14 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 15: // Views\InkDrawPicturePage.xaml line 36
                        this.obj15 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 16: // Views\InkDrawPicturePage.xaml line 38
                        this.obj16 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 17: // Views\InkDrawPicturePage.xaml line 15
                        this.obj17 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_17(this.obj17);
                        break;
                    case 18: // Views\InkDrawPicturePage.xaml line 18
                        this.obj18 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj7.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::CloudLib.Client.ViewModels.InkDrawPictureViewModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IInkDrawPicturePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::CloudLib.Client.ViewModels.InkDrawPictureViewModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ZoomInCommand(obj.ZoomInCommand, phase);
                        this.Update_ZoomOutCommand(obj.ZoomOutCommand, phase);
                        this.Update_ResetZoomCommand(obj.ResetZoomCommand, phase);
                        this.Update_FitToScreenCommand(obj.FitToScreenCommand, phase);
                        this.Update_LoadImageCommand(obj.LoadImageCommand, phase);
                        this.Update_SaveImageCommand(obj.SaveImageCommand, phase);
                        this.Update_ClearAllCommand(obj.ClearAllCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_EnableTouch(obj.EnableTouch, phase);
                        this.Update_EnableMouse(obj.EnableMouse, phase);
                    }
                }
            }
            private void Update_ZoomInCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 24
                    if (!isobj10CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ZoomOutCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 25
                    if (!isobj11CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ResetZoomCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 28
                    if (!isobj12CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj12, obj, null);
                    }
                }
            }
            private void Update_FitToScreenCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 29
                    if (!isobj13CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                    }
                }
            }
            private void Update_LoadImageCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 33
                    if (!isobj14CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj14, obj, null);
                    }
                }
            }
            private void Update_SaveImageCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 36
                    if (!isobj15CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ClearAllCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 38
                    if (!isobj16CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj16, obj, null);
                    }
                }
            }
            private void Update_EnableTouch(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 15
                    if (!isobj17IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj17, obj, null);
                    }
                }
            }
            private void Update_EnableMouse(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 18
                    if (!isobj18IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj18, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_17_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableTouch = (global::System.Boolean)this.obj17.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_18_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableMouse = (global::System.Boolean)this.obj18.IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InkDrawPicturePage_obj7_BindingsTracking
            {
                private global::System.WeakReference<InkDrawPicturePage_obj7_Bindings> weakRefToBindingObj; 

                public InkDrawPicturePage_obj7_BindingsTracking(InkDrawPicturePage_obj7_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InkDrawPicturePage_obj7_Bindings>(obj);
                }

                public InkDrawPicturePage_obj7_Bindings TryGetBindingObject()
                {
                    InkDrawPicturePage_obj7_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InkDrawPicturePage_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj = sender as global::CloudLib.Client.ViewModels.InkDrawPictureViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "EnableTouch":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnableMouse":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj)
                {
                    InkDrawPicturePage_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_17(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_17_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_18(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_IsChecked();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InkDrawPicturePage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IInkDrawPicturePage_Bindings
        {
            private global::CloudLib.Client.Views.InkDrawPicturePage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.AppBarButton obj25;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj26;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj27;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj28;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj29;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj30;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj31;
            private global::Windows.UI.Xaml.Controls.Image obj32;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj25CommandDisabled = false;
            private static bool isobj26CommandDisabled = false;
            private static bool isobj27CommandDisabled = false;
            private static bool isobj28CommandDisabled = false;
            private static bool isobj29CommandDisabled = false;
            private static bool isobj30CommandDisabled = false;
            private static bool isobj31CommandDisabled = false;
            private static bool isobj32SourceDisabled = false;

            private InkDrawPicturePage_obj1_BindingsTracking bindingsTracking;

            public InkDrawPicturePage_obj1_Bindings()
            {
                this.bindingsTracking = new InkDrawPicturePage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 99 && columnNumber == 81)
                {
                    isobj25CommandDisabled = true;
                }
                else if (lineNumber == 100 && columnNumber == 83)
                {
                    isobj26CommandDisabled = true;
                }
                else if (lineNumber == 103 && columnNumber == 91)
                {
                    isobj27CommandDisabled = true;
                }
                else if (lineNumber == 104 && columnNumber == 72)
                {
                    isobj28CommandDisabled = true;
                }
                else if (lineNumber == 108 && columnNumber == 70)
                {
                    isobj29CommandDisabled = true;
                }
                else if (lineNumber == 111 && columnNumber == 82)
                {
                    isobj30CommandDisabled = true;
                }
                else if (lineNumber == 113 && columnNumber == 83)
                {
                    isobj31CommandDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 25)
                {
                    isobj32SourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 25: // Views\InkDrawPicturePage.xaml line 99
                        this.obj25 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 26: // Views\InkDrawPicturePage.xaml line 100
                        this.obj26 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 27: // Views\InkDrawPicturePage.xaml line 103
                        this.obj27 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 28: // Views\InkDrawPicturePage.xaml line 104
                        this.obj28 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 29: // Views\InkDrawPicturePage.xaml line 108
                        this.obj29 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 30: // Views\InkDrawPicturePage.xaml line 111
                        this.obj30 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 31: // Views\InkDrawPicturePage.xaml line 113
                        this.obj31 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 32: // Views\InkDrawPicturePage.xaml line 84
                        this.obj32 = (global::Windows.UI.Xaml.Controls.Image)target;
                        this.bindingsTracking.RegisterTwoWayListener_32(this.obj32);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IInkDrawPicturePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::CloudLib.Client.Views.InkDrawPicturePage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CloudLib.Client.Views.InkDrawPicturePage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ZoomInCommand(obj.ZoomInCommand, phase);
                        this.Update_ViewModel_ZoomOutCommand(obj.ZoomOutCommand, phase);
                        this.Update_ViewModel_ResetZoomCommand(obj.ResetZoomCommand, phase);
                        this.Update_ViewModel_FitToScreenCommand(obj.FitToScreenCommand, phase);
                        this.Update_ViewModel_LoadImageCommand(obj.LoadImageCommand, phase);
                        this.Update_ViewModel_SaveImageCommand(obj.SaveImageCommand, phase);
                        this.Update_ViewModel_ClearAllCommand(obj.ClearAllCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Image(obj.Image, phase);
                    }
                }
            }
            private void Update_ViewModel_ZoomInCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 99
                    if (!isobj25CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj25, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ZoomOutCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 100
                    if (!isobj26CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj26, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ResetZoomCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 103
                    if (!isobj27CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj27, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FitToScreenCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 104
                    if (!isobj28CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj28, obj, null);
                    }
                }
            }
            private void Update_ViewModel_LoadImageCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 108
                    if (!isobj29CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj29, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SaveImageCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 111
                    if (!isobj30CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj30, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ClearAllCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 113
                    if (!isobj31CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj31, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Image(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPicturePage.xaml line 84
                    if (!isobj32SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj32, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_32_Source()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Image = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)this.obj32.Source;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InkDrawPicturePage_obj1_BindingsTracking
            {
                private global::System.WeakReference<InkDrawPicturePage_obj1_Bindings> weakRefToBindingObj; 

                public InkDrawPicturePage_obj1_BindingsTracking(InkDrawPicturePage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InkDrawPicturePage_obj1_Bindings>(obj);
                }

                public InkDrawPicturePage_obj1_Bindings TryGetBindingObject()
                {
                    InkDrawPicturePage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InkDrawPicturePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj = sender as global::CloudLib.Client.ViewModels.InkDrawPictureViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Image(obj.Image, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Image":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Image(obj.Image, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::CloudLib.Client.ViewModels.InkDrawPictureViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::CloudLib.Client.ViewModels.InkDrawPictureViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void RegisterTwoWayListener_32(global::Windows.UI.Xaml.Controls.Image sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Image.SourceProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_32_Source();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3: // Views\InkDrawPicturePage.xaml line 44
                {
                    global::Windows.UI.Xaml.Controls.InkToolbar element3 = (global::Windows.UI.Xaml.Controls.InkToolbar)(target);
                    ((global::Windows.UI.Xaml.Controls.InkToolbar)element3).Loaded += this.OnInkToolbarLoaded;
                }
                break;
            case 8: // Views\InkDrawPicturePage.xaml line 14
                {
                    global::Windows.UI.Xaml.Controls.InkToolbar element8 = (global::Windows.UI.Xaml.Controls.InkToolbar)(target);
                    ((global::Windows.UI.Xaml.Controls.InkToolbar)element8).Loaded += this.OnInkToolbarLoaded;
                }
                break;
            case 19: // Views\InkDrawPicturePage.xaml line 55
                {
                    this.ContentArea = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 20: // Views\InkDrawPicturePage.xaml line 57
                {
                    this.visualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                    ((global::Windows.UI.Xaml.VisualStateGroup)this.visualStateGroup).CurrentStateChanged += this.VisualStateGroup_CurrentStateChanged;
                }
                break;
            case 21: // Views\InkDrawPicturePage.xaml line 58
                {
                    this.SmallVisualState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 22: // Views\InkDrawPicturePage.xaml line 63
                {
                    this.BigVisualState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 23: // Views\InkDrawPicturePage.xaml line 74
                {
                    this.canvasScroll = (global::Windows.UI.Xaml.Controls.ScrollViewer)(target);
                }
                break;
            case 24: // Views\InkDrawPicturePage.xaml line 94
                {
                    this.bottomCommandBar = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 32: // Views\InkDrawPicturePage.xaml line 84
                {
                    this.image = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            case 33: // Views\InkDrawPicturePage.xaml line 88
                {
                    this.inkCanvas = (global::Windows.UI.Xaml.Controls.InkCanvas)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\InkDrawPicturePage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    InkDrawPicturePage_obj1_Bindings bindings = new InkDrawPicturePage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // Views\InkDrawPicturePage.xaml line 44
                {                    
                    global::Windows.UI.Xaml.Controls.InkToolbar element3 = (global::Windows.UI.Xaml.Controls.InkToolbar)target;
                    InkDrawPicturePage_obj3_Bindings bindings = new InkDrawPicturePage_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            case 7: // Views\InkDrawPicturePage.xaml line 12
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element7 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    InkDrawPicturePage_obj7_Bindings bindings = new InkDrawPicturePage_obj7_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element7.DataContext);
                    element7.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element7, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element7, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

